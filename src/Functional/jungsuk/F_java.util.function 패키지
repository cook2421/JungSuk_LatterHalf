대부분의 메소드는 타입이 비슷하다.
매개변수가 없거나 한 개 또는 두 개, 반환값은 없거나 한 개.
게다가 지네릭 메소드로 정의하면 매개변수나 반환 타입이 달라도 문제가 되지 않는다.
그래서 java.util.function 패키지에 일반적으로 자주 쓰이는 형식의 메소드를 함수형 인터페이스로 미리 정의해 놓았다.

매번 새로운 함수형 인터페이스를 정의하지 말고, 가능하면 이 패키지의 인터페이스를 활용하는 것이 좋다.
그래야 함수형 인터페이스에 정의된 메소드 이름도 통일되고, 재사용성이나 유지보수 측면에서도 좋다.


<함수형 인터페이스>         <메소드>               <설명>
java.lang.Runnable        void run()            매개변수도 없고, 반환값도 없음.
Supplier<T>               T get()               매개변수는 없고, 반환값만 있음.
Consumer<T>               void accept(T t)      Supplier와 반대로 매개변수만 있고, 반환값이 없음.
Function<T,R>             R apply(T t)          일반적인 함수. 하나의 매개변수를 받아서 결과를 반환.
Predicate<T>              boolean test(T t)     조건식을 표현하는데 사용됨. 매개변수는 하나, 반환 타입은 boolean

(타입 문자 'T'는 'Type'을, 'R'은 'Return Type'을 의미한다)


Function의 변형으로 Predicate가 있는데, 반환값이 boolean이라는 것만 제외하면 Function과 동일하다.
Predicate는 조건식을 함수로 표현하는데 사용된다.




[Predicate 예시]
Predicate<String> isEmptyStr = s -> s.length() == 0;
String s = "";

if(isEmptyStr.test(s))      // if(s.length() == 0)
    System.out.println("This is an empty String.");

(수학에서 결과로 true 또는 false를 반환하는 함수를 'predicate'라고 한다)




[매개변수가 두 개인 함수형 인터페이스]

<함수형 인터페이스>         <메소드>                   <설명>
BiConsumer<T,U>       void accept(T t, U u)         두 개의 매개변수만 있고, 반환값이 없음.
BiPredicate<T,U>      boolean test(T t, U u)        조건식을 표현하는데 사용됨. 매개변수는 둘, 반환값은 boolean
BiFunction<T,U,R>     R apply(T t, U u)             두 개의 매개변수를 받아서 하나의 결과를 반환

(매개변수의 타입으로 보통 'T'를 사용하므로, 알파벳에서 'T'의 다음 문자인 'U', 'V', 'W'를 매개변수의 타입으로 사용하는 것일 뿐 별다른 의미는 없다)


두 개 이상의 매개변수를 갖는 함수형 인터페이스가 필요하다면 직접 만들어서 써야한다.
만일 3개의 매개변수를 갖는 함수형 인터페이스를 선언한다면 다음과 같을 것이다.
@FunctionalInterface
interface TriFunction<T,U,V,R> {
    R apply(T t, U u, V v);
}




[UnaryOperator와 BinaryOperator]
Function의 또 다른 변형으로 UnaryOperator와 BinaryOperator가 있는데,
매개변수의 타입과 반환타입의 타입이 모두 일치한다는 점만 제외하고는 Function과 같다.

<함수형 인터페이스>         <메소드>                   <설명>
UnaryOperator<T>        T apply(T t)                Function의 자손. Function과 달리 매개변수와 결과의 타입이 같다.
BinaryOperator<T>       T apply(T t, T t)           BiFunction의 자손. BiFunction과 달리 매개변수와 결과의 타입이 같다.