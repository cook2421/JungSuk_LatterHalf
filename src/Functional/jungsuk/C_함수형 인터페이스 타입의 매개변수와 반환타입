[함수형 인터페이스 타입의 매개변수]
함수형 인터페이스 MyFunction이 아래와 같이 정의되어 있을 때,
@FunctionalInterface
interface MyFunction {
    void myMethod();        // 추상 메소드
}


어떤 메소드의 매개변수가 MyFunction 타입이면,
이 메소드를 호출할 때 람다식을 참조하는 참조변수를 매개변수로 지정해야한다.
void aMethod(MyFunction f) {        // 매개변수의 타입이 함수형 인터페이스
    f.myMethod();                   // MyFunction에 정의된 메소드 호출
}
    ...
MyFunction f = () -> System.out.println("myMethod()");
aMethod(f);


또는 참조변수 없이 아래와 같이 직접 람다식을 매개변수로 지정하는 것도 가능하다.
aMethod(() -> System.out.println("myMethod()"));        // 람다식을 매개변수로 지정



[함수형 인터페이스 타입의 반환타입]
메소드의 반환타입이 함수형 인터페이스 타입이라면,
이 함수형 인터페이스의 추상메소드와 동등한 람다식을 가리키는 참조변수를 반환하거나 람다식을 직접 반환할 수 있다.
MyFunction myMethod() {
    MyFunction f = () -> {};
    return f;                   // 이 줄과 윗 줄을 한 줄로 줄이면, return () -> {};
}


람다식을 참조변수로 다룰 수 있다는 것은 메소드를 통해 람다식을 주고받을 수 있다는 것을 의미한다.
즉, 변수처럼 메소드를 주고받는 것이 가능해진 것이다.
(사실상 메소드가 아니라 객체를 주고받는 것이라 근본적으로 달라진 것은 아무것도 없지만,
 람다식 덕분에 예전보다 코드가 더 간결하고 이해하기 쉬워졌다)