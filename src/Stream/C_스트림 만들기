[컬렉션]
* 컬렉션의 최고 조상인 Collection에 stream()이 정의되어 있다.



[배열]
* 배열을 소스로 하는 스트림을 생성하는 메소드는 Stream과 Arrays에 static메소드로 정의되어 있다.



[특정 범위의 정수]
* IntStream과 LongStream은 다음과 같이 지정된 범위의 연속된 정수를 스트림으로 생성해서 반환하는 range()와 rangeClosed()를 가지고 있다.

    IntStream intStream = IntStream.range(1, 5);            // 1,2,3,4
    IntStream intStream = IntStream.rangeClosed(1, 5);      // 1,2,3,4,5



[임의의 수]
* Random클래스에는 아래와 같은 인스턴스 메소드들이 포함되어 있다. 이 메소드들은 해당 타입의 난수들로 이루어진 스트림을 반환한다.

    IntStream    ints()
    LongStream   longs()
    DoubleStream doubles()

* 이 메소드들이 반환하는 스트림은 크기가 정해지지 않은 '무한 스트림(infinite stream)'이므로 limit()도 같이 사용해서 스트림의 크기를
  제한해 주어야 한다. limit()는 스트림의 개수를 지정하는 사용된다.

    IntStream intStream = new Random().ints();          // 무한 스트림
    intStream.limit(5).forEach(System.out::println);    // 5개의 요소만 출력한다.

* 아래의 메소드들은 매개변수로 스트림의 크기를 지정해서 '유한 스트림'을 생성해서 반환하므로 limit()를 사용하지 않아도 된다.

    IntStream    ints(long streamSize)
    LongStream   longs(long streamSize)
    DoubleStream doubles(long streamSize)

    IntStream intStream = new Random().ints(5);         // 크기가 5인 난수 스트림을 반환

* 지정된 범위(begin ~ end)의 난수를 발생시키는 스트림을 얻는 메소드는 아래와 같다. 단, end는 범위에 포함되지 않는다.

    IntStream    ints(int begin, int end)
    LongStream   longs(long begin, long end)
    DoubleStream doubles(double begin, double end)

    IntStream    ints(long streamSize, int begin, int end)
    LongStream   longs(long streamSize, long begin, long end)
    DoubleStream doubles(long streamSize, double begin, double end)



[람다식 - iterate(), generate()]
* Stream 클래스의 iterate()와 generate()는 람다식을 매개변수로 받아서, 이 람다식에 의해 계산되는 값들을 요소로 하는 무한 스트림을 생성한다.

    static <T> Stream<T> iterate<T seed, UnaryOperator<T> f)
    static <T> Stream<T> generate(Supplier<T> s)

* iterate()는 씨앗값(seed)으로 지정된 값부터 시작해서, 람다식 f에 의해 계산된 결과를 다시 seed값으로 해서 계산을 반복한다.
    Stream<Integer> evenStream = Stream.iterate(0, n->n+2);       // 0, 2, 4, 6, ...

* generate()도 iterate()처럼, 람다식에 의해 계산되는 값을 요소로 하는 무한 스트림을 생성해서 반환하지만,
  iterate()와 달리, 이전 결과를 이용해서 다음 요소를 계산하지 않는다.
  그리고 generate()에 정의된 매개변수의 타입은 Supplier<T>이므로 매개변수가 없는 람다식만 허용된다.
    Stream<Double> randomStream = Stream.generate(Math::random);
    Stream<Integer> oneStream   = Stream.generate(()->1);

* 한 가지 주의할 점은 iterate()와 generate()에 의해 생성된 스트림을 기본형 스트림 타입의 참조변수로 다룰 수 없다는 것이다. (IntStream이나 DoubleStream으로 못 받음)



[파일]
* java.nio.file.Files는 파일을 다루는데 필요한 유용한 메소드들을 제공하는데,
  list()는 지정된 디렉토리(dir)에 있는 파일의 목록을 소스로 하는 스트림을 생성해서 반환한다.
    Stream<Path> Files.list(Path dir)

    Stream<String> Files.lines(Path path)
    Stream<String> Files.lines(Path path, Charset cs)
    Stream<String> lines()      // BufferedReader의 클래스(파일 뿐만 아니라 다른 입력대상으로부터도 데이터를 행단위로 읽어올 수 있다)



[빈 스트림]
* 요소가 하나도 없는 비어있는 스트림을 생성할 수도 있다.
  스트림에 연산을 수행한 결과가 하나도 없을 때, null보다 빈 스트림을 반환하는 것이 낫다.
    Stream emptyStream = Stream.empty();        // empty()는 빈 스트림을 생성해서 반환한다.
    long count = emptyStream.count();           // count의 값은 0



[두 스트림의 연결]
* Stream의 static 메소드인 concat()을 사용하면, 두 스트림을 하나로 연결할 수 있다.

    String[] str1 = {"123", "456", "789"};
    String[] str2 = {"ABC", "abc", "DEF"};

    Stream<String> strs1 = Stream.of(str1);
    Stream<String> strs2 = Stream.of(str2);
    Stream<String> strs3 = Stream.concat(str1, str2);       // 두 스트림을 하나로 연결
