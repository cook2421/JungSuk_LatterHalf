[배경]
* 자바를 개발한 사람들은 소스코드에 대한 문서를 따로 만들기보다 소스코드와 문서를 하나의 파일로 관리하는 것이 낫다고 생각했다.
* 그래서 소스코드의 주석 '/** ~ */'에 소스코드에 대한 정보를 저장하고, 소스코드의 주석으로부터 HTML문서를 생성해내는 프로그램(javadoc.exe)을 만들어서 사용했다.
* '/**'로 시작하는 주석 안에 소스코드에 대한 설명들이 있고, 그 안에 '@'이 붙은 미리 정의된 태그들을 이용해서 주석 안에 정보를 저장하고,
  javadoc.exe라는 프로그램이 이 정보를 읽어서 문서를 작성하는데 사용한다.

[정의]
* 이 기능을 응용하여, 프로그램의 소스코드 안에 다른 프로그램을 위한 정보를 미리 약속된 형식으로 포함시킨 것이 바로 애너테이션이다.

[특징]
* 애너테이션은 주석(comment)처럼 프로그래밍 언어에 영향을 미치지 않으면서도 다른 프로그램에게 유용한 정보를 제공할 수 있다는 장점이 있다.
* 예를 들어, 자신이 작성한 소스코드 중에서 특정 메소드만 테스트하기를 원한다면, '@Test'라는 애너테이션을 메소드 앞에 붙인다.
  '@Test'는 '이 메소드를 테스트해야 한다'는 것을 테스트 프로그램에게 알리는 역할을 할 뿐, 메소드가 포함된 프로그램 자체에는 아무런 영향을 미치지 않는다.
* 모든 프로그램에게 의미가 있는 것은 아니고, 해당 프로그램에 미리 정의된 종류와 형식으로 작성해야만 의미가 있다.

[표준 애너테이션]
@Override : 컴파일러에게 오버라이딩하는 메소드라는 것을 알린다.
@Deprecated : 앞으로 사용하지 않을 것을 권장하는 대상에게 붙인다.
@SuppressWarnings : 컴파일러의 특정 경고메시지가 나타나지 않게 해준다.
@SafeVarags : 지네릭스 타입의 가변인자에 사용한다.(JDK1.7)
@FunctionalInterface : 함수형 인터페이스라는 것을 알린다.(JDK1.8)
@Native : native메소드에서 참조되는 상수 앞에 붙인다.(JDK1.8)

[표준 메타 애너테이션] : 애너테이션을 정의하는데 사용되는, 애너테이션의 애너테이션
@Target : 애너테이션이 적용가능한 대상을 지정하는데 사용한다.
@Documented : 애너테이션 정보가 javadoc으로 작성된 문서에 포함되게 한다.
@Inherited : 애너테이션이 자손 클래스에 상속되도록 한다.
@Retention : 애너테이션이 유지되는 범위를 지정하는데 사용한다.
@Repeatable : 애너테이션을 반복해서 적용할 수 있게 한다.(JDK1.8)